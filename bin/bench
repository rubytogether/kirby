#!/bin/bash
set -euo pipefail

command -v hyperfine >/dev/null || (echo "You need to install 'hyperfine' with cargo or brew." && exit 1)

if [[ -z "${1:-}" ]]; then
  mkdir -p logs
  test -e logs/example.log.gz || curl -Lo logs/example.log.gz "https://github.com/rubytogether/kirby/releases/download/log-sample/example.log.gz"
  LOG="logs/example.log.gz"
else
  LOG="$1"
  shift
fi

if [[ -n "${PGO:-}" ]]; then
  LLVM_PROFDATA="$(ls ~/.rustup/toolchains/*/lib/rustlib/*/bin/llvm-profdata 2> /dev/null || true)"
  test -n "$LLVM_PROFDATA" && command -v $LLVM_PROFDATA > /dev/null || (echo "You need to install 'llvm-profdata' byrunning 'rustup component add llvm-tools-preview'" && exit 1)

  # STEP 0: Make sure there is no left-over profiling data from previous runs
  rm -rf /tmp/pgo-data
  cargo clean

  # STEP 1: Build the instrumented binaries
  RUSTFLAGS="-Cprofile-generate=/tmp/pgo-data -Cllvm-args=-vp-counters-per-site=4" \
    cargo build --release --bin kirby

  # STEP 2: Run the instrumented binaries with some typical data
  ls logs/*.gz | xargs -I{} target/release/kirby "{}"

  # STEP 3: Merge the `.profraw` files into a `.profdata` file
  $LLVM_PROFDATA merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data

  # STEP 4: Use the `.profdata` file for guiding optimizations
  RUSTFLAGS="-Cprofile-use=/tmp/pgo-data/merged.profdata" \
    cargo build --release --bin kirby
else
  cargo build --bin kirby --release
fi

echo
echo "kirby commit $(git log -1 --pretty=format:%H)"
echo "$(gzcat $LOG | wc -l) records total"
hyperfine --warmup 3 "target/release/kirby $LOG" "$@"
